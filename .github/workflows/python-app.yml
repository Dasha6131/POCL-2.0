# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
  sync-to-space:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Push to space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_USERNAME: hudorojckov.leva@yandex.ru
          HF_SPACE: huggingface.co/spaces/DrWat/POCL
          TARGET_BRANCH: main
          GIT_USER_EMAIL: GIT_USER_EMAIL
          GIT_USER_NAME: GIT_USER_NAME
        run: |
          echo "Cloning destination git repository"
          git config --global user.email "$GIT_USER_EMAIL"
          git config --global user.name "$GIT_USER_NAME"
          CLONE_DIR=$(mktemp -d)
          git clone "https://$HF_USERNAME:$HF_TOKEN@$HF_SPACE" "$CLONE_DIR"
          ls -la "$CLONE_DIR"
          echo "Copy contents to clone git repository"
          cp -rf * "$CLONE_DIR"
          COMMIT_MESSAGE=$(git log --oneline --format=%B -n 1 HEAD | head -n 1)
          COMM=${COMM:=Sync with Github}
          echo "commit message:"
          echo "$COMMIT_MESSAGE"
          cd "$CLONE_DIR"
          echo "Files that will be pushed:"
          ls -la
          echo "git add:"
          git add -A
          echo "git status:"
          git status
          echo "git diff-index:"
          git diff-index --quiet HEAD || git commit --message "$COMMIT_MESSAGE"
          echo "git push origin:"
          git push "https://$HF_USERNAME:$HF_TOKEN@$HF_SPACE" "$TARGET_BRANCH"
